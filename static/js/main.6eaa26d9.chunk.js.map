{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["document","body","style","RandomStarWarsQuote","props","state","quotes","quote","author","film","quoteToRender","link","getQuote","bind","regex","replace","this","length","setState","makeHrefLink","stateQuotes","randIndex","Math","floor","random","nextQuote","splice","Jumbotron","id","Button","title","variant","onClick","target","className","href","data-size","React","Component","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6eaa26d9.chunk.js","sourcesContent":["import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\n\nimport './App.css';\n\ndocument.body.style = 'background: black;';\n\n// Main component which contains state\nclass RandomStarWarsQuote extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes:\n      [\n        {quote: \"Help me, Obi-Wan Kenobi. You’re my only hope.\", \n         author: \"Leia Organa\",\n         film: \"A New Hope\"},\n        {quote: \"I find your lack of faith disturbing.\", \n         author: \"Darth Vader\",\n         film: \"A New Hope\"},\n        {quote: \"It’s the ship that made the Kessel run in less than twelve parsecs. I’ve outrun Imperial starships. Not the local bulk cruisers, mind you. I’m talking about the big Corellian ships, now. She’s fast enough for you, old man.\", \n         author: \"Han Solo\",\n         film: \"A New Hope\"},\n        {quote: \"The Force will be with you. Always.\", \n         author: \"Obi-Wan Kenobi\",\n         film: \"A New Hope\"},\n         {quote: \"Why, you stuck-up, half-witted, scruffy-looking nerf herder!\", \n         author: \"Leia Organa\",\n         film: \"The Empire strikes back\"},\n         {quote: \"Never tell me the odds!\", \n         author: \"Han Solo\",\n         film: \"The Empire strikes back\"},\n         {quote: \"Do. Or do not. There is no try.\", \n         author: \"Yoda\",\n         film: \"The Empire strikes back\"},\n         {quote: \"No. I am your father.\", \n         author: \"Darth Vader\",\n         film: \"The Empire strikes back\"},\n      ],\n      // Current quote to show is held here\n      quoteToRender: {},\n      // Twitter href link\n      link: ''\n    };\n\n    // Binding\n    this.getQuote = this.getQuote.bind(this);\n  }\n  \n  // Function which returns twitter href including current quote data as passed by calling function\n  // This has no access to state and simply returns the href to the calling function\n  makeHrefLink(quote) {\n    // regex to replace whitespace\n    const regex = /\\s/g;\n    return 'https://twitter.com/intent/tweet?text='\n            + '\"' + quote[\"quote\"].replace(regex, \"%20\")\n            + '\" ' + quote['author'].replace(regex, \"%20\")\n            + '. ' + quote['film'].replace(regex, \"%20\") + '.'\n  }\n\n  // Function to randomly choose which quote to show, ths also removes the used quote from state and \n  // resets the quote list when it is empty.\n  getQuote() {\n    switch(this.state.quotes.length) {\n      // Check if we are on the final quote in the state list\n      case 1:\n        this.setState({\n          // The final quote is set as the the quote to render\n          quoteToRender: this.state.quotes[0],\n          // Twitter link generated\n          link: this.makeHrefLink(this.state.quotes[0]),\n          quotes:      \n          [\n            {quote: \"Help me, Obi-Wan Kenobi. You’re my only hope.\", \n             author: \"Leia Organa\",\n             film: \"A New Hope\"},\n            {quote: \"I find your lack of faith disturbing.\", \n             author: \"Darth Vader\",\n             film: \"A New Hope\"},\n            {quote: \"It’s the ship that made the Kessel run in less than twelve parsecs. I’ve outrun Imperial starships. Not the local bulk cruisers, mind you. I’m talking about the big Corellian ships, now. She’s fast enough for you, old man.\", \n             author: \"Han Solo\",\n             film: \"A New Hope\"},\n            {quote: \"The Force will be with you. Always.\", \n             author: \"Obi-Wan Kenobi\",\n             film: \"A New Hope\"},\n             {quote: \"Why, you stuck-up, half-witted, scruffy-looking nerf herder!\", \n             author: \"Leia Organa\",\n             film: \"The Empire strikes back\"},\n             {quote: \"Never tell me the odds!\", \n             author: \"Han Solo\",\n             film: \"The Empire strikes back\"},\n             {quote: \"Do. Or do not. There is no try.\", \n             author: \"Yoda\",\n             film: \"The Empire strikes back\"},\n             {quote: \"No. I am your father.\", \n             author: \"Darth Vader\",\n             film: \"The Empire strikes back\"},\n          ],\n        });\n        break;\n      default:\n        // Temp copy of state quotes\n        let stateQuotes = [...this.state.quotes];\n        // Quote randomly chosen\n        const randIndex = Math.floor(Math.random() * this.state.quotes.length);\n        // Current quote spliced from temp quotes\n        const nextQuote = stateQuotes.splice(randIndex, 1)[0];      \n        // Updates to state\n        this.setState({\n          quotes: stateQuotes,\n          quoteToRender: nextQuote,\n          link: this.makeHrefLink(nextQuote)\n        });\n      }\n    }\n\n  // Call for to generate random quote on component load\n  componentDidMount() {\n    this.getQuote();\n  }\n  \n  render() {    \n    return (\n        // React-Bootstrap jumbotron component\n        <Jumbotron>\n          {/* Random quote, author and film title interpolated into HTML */}\n          <h1 id='text'>\"{this.state.quoteToRender['quote']}\"</h1>\n          <h4 id='author'>- {this.state.quoteToRender['author']}, {this.state.quoteToRender['film']}</h4>\n          <br />\n          {/* React-Bootstrap button component, the 'onClick' event handler calls the 'getQuote' method to generate next \n              quote and twitter link */}\n          <Button title=\"Next quote\" variant=\"dark\" id=\"new-quote\" onClick={this.getQuote}>Next quote!</Button>\n          <br />\n          <Button variant=\"dark\" \n            target=\"_blank\"\n            id=\"tweet-quote\"\n            className=\"twitterBtn twitter-share-button bi bi-twitter\"\n            href={this.state.link}\n            data-size=\"large\"\n            title=\"Tweet this quote\"\n            >\n          </Button>\n        </Jumbotron>\n      );\n    }\n  }\n\n\nconst App = () => (\n  <Container className=\"p-3\"  id=\"quote-box\">\n      <RandomStarWarsQuote />\n  </Container>\n);\n\nexport default App;\n\n\n\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}